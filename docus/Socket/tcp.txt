■仕組み

①接続開始フェーズ
→3ウェイハンドシェイク
  Client (state)     |     Server (state)
---------------------------------------
         (CLOSED)                 (LISTEN)
  SYN    (SYN-SENT)  ->           (LISTEN)
         (SYN-SENT)  <-    SYN/ACK(SYN-RECIEVED)
  ACK    (ESTABLISHD)->           (ESTABLISHED)

②接続確立フェーズ
アプリケーションデータを安全に送信するために3つの制御を行う
1.フロー制御…clientからserverに対して受信可能な量(受信ウィンドウ、rwnd)を教えることで
　データの流量を制御
2.輻輳制御…serverが円滑にデータを各clientに送信できるよう(輻輳しないよう)に輻輳ウィンドウ(cwnd)に
　基づいて流量を制御
  →ここで輻輳ウィンドウの調整は「スロースタートフェーズ」と「輻輳回避フェーズ」の2段階で行われる
　a).スロースタートフェーズ…最初は少なくして指数関数的に流量を上昇させる、
　　　　　　　　　　　　　　 「スロースタート閾値」に達するか、輻輳を感知したら輻輳回避フェーズへ遷移
　b).輻輳回避フェーズ…輻輳を感知しているので、少しずつ上げていくが、上昇の仕方には3種類ある
　　 (1).ロスペース
　　 (2).遅延ペース
     (3).ハイブリットペース
3.再送制御…パケットロスを検知した場合にパケットデータを再送する方法には、2種類のタイミングがある
　a).重複ACK…受信側のタイミング
  b).再送タイムアウト…送信側のタイミング

③接続終了フェーズ
→4ウェイハンドシェイク…ちなみに4ウェイハンドシェイクはClient→Serverから始まるとは限らなく、
　　　　　　　　　　　　 終わらせにかかる方を「アクティブクローズ」、終わらせられる方を「パッシブクローズ」と呼ぶ
  Active (state)      |     Passive (state)
-----------------------------------------------
         (ESTABLISHED)              (ESTABLISHED) 
  FIN/ACK(FIN-WAIT1)  ->            (ESTABLISHED)
         (FIN-WAIT2)  <-    ACK     (ESTABLISHED)
         (FIN-WAIT2)  <-    FIN/ACK (CLOSE-WAIT)
  ACK    (TIME-WAIT)  ->            (CLOSED)
         (CLOSED)
　