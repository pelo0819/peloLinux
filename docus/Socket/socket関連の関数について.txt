■前置き
TCP/IPでの情報の通信を行いたい場合には、
socket関数→bind関数→listen関数→accept関数→close関数の順で手続きを行うと、
3ウェイハンドシェイク～4ウェイハンドシェイクまでを行う。
OSI参照モデルで言うとトランスポート層で情報を扱える。
TCP/IPでのアプリケーションを開発するなら、上記で良い(通常はこれで十分なはず)。

ただ、盗聴、パケットの書き換えを行いたい場合は、
Ethernetで構成されたネットワークでの「ある特性」を利用してデータリンク層で情報を取得する。
その特性とは、同一セグメントに属する端末には、自分宛てでないパケットが実は届いているということ。
何気なくPCでネットサーフィンをしている場合でも、NICまでは他の人宛てのパケットも自分に届いているが、
フィルタをかけて自分宛以外のパケットは削除している。
自分宛でないパケットも処理していたらパフォーマンスが低下するからね。
少し調べると「NICの設定をプロミスキャスモードに設定すれば、自分宛でないパケットも受信できる」
という記述がよくみられるが、これは全く逆であると僕は解釈している。
繰り返しになるが、そもそも自分宛でないパケットも実は手に届く直前まで到達している。
パケットを全部受信していたらパフォーマンスが下がるため、基本的に自分宛でないパケットは
受信しないとデフォルトで設定してある。
上記を踏まえると、「NICをプロミスキャスモードに設定する」とは、フィルタリングを解除し、
同一セグメントにあるパケットは全部届くという特性をフルに利用すること。


■socket関連の関数について
①socket関数
　例1) socket(PF_INET,   SOCK_STREAM, IPPROTO_TCP))
　　　　→TCP接続したい場合の設定方法
  例2) socket(AF_PACKET, SOCK_RAW,    htons(ETH_P_ALL))
　　　　→arg1：AF_PACKET(PF_PACKET)を設定することで、生パケットをアプリケーションで扱える
    　　　arg2：SOCK_RAWならデータリンク層から扱える、SOCK_DGRAMならトランスポート層の生データを扱える
    　　　arg3：受信するイーサネットタイプを指定、
    　          ETH_P_IPならIPパケットのみを受信、ETH_P_ARPならARPパケットのみを受信、今回は全部(ETH_P_ALL)

②bind関数
　→bind関数は、「ソケットに名前をつける」ことをするらしい。意味がわからないのでかみ砕く。
　→「socket関数で作成されたソケットに指定したアドレスを割り当てる」ことらしい
　　まだ全然わからないので、かみ砕く
　→ここからは、僕の解釈なので、間違っていたら逐次修正すること
　　bind関数は、作成したソケットをどこに設置するかを決める関数と解釈
　　例1)トランスポート層で情報を取得する場合(かつTCPの場合)
        struct sockaddr_in servSockAddr;
  　　　servSockAddr.sin_family      = AF_INET;
        servSockAddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servSockAddr.sin_port        = htons(servPort);
        bind(servSock, (struct sockaddr *) &servSockAddr, sizeof(servSockAddr));
        TCPの場合は、4行目でポート番号を設定している。
　　　　これは、ソケットを設定したポート番号に取り付けることを意味している
　　例2)データリンク層で情報を取得する場合
         struct sockaddr_ll sa;
　　　　 sa.sll_family = PF_PACKET; 
         sa.sll_protocol = htons(ETH_P_ALL);
         sa.sll_ifindex = if_req.ifr_ifindex;
         bind(soc, (struct sockaddr *)&sa, sizeof(sa))
         データリンク層で情報を取得する場合には、4行目で受信するネットワークインターフェース
　　　　 を設定している
　　　　 これは、ポート番号何番とかいうことよりもっと前(物理層に近いという意味の「前」)の位置に
　　　　 ソケットを設置し情報を取得しようとしている

③listen関数
　→socket関数とbind関数で作成したソケットを待機状態にする
　　→portのステートをLISTENにする
     (netstatコマンドで確認するとbindで設定したIPAddress:PortがLISTENになっている)
